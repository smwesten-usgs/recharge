{
    "collab_server" : "",
    "contents" : "BaseflowSeparation <-\n  function(streamflow, filter_parameter=0.925, passes=3){\n    suppressWarnings(Ends<-c(1,length(streamflow))*rep(1,(passes+1))) # Start and end values for the filter function\n    suppressWarnings(AddToStart<-c(1,-1)*rep(1,passes))\n    btP<-streamflow##Previous pass's baseflow approximation\n    qft<-vector(length=length(streamflow))\n    bt<-vector(length=length(streamflow))\n    bt[1]<-if(streamflow[1]<quantile(streamflow,0.25)) streamflow[1] else mean(streamflow)/1.5\n    ##Guess baseflow value in first time step.  \n    for(j in 1:passes){\n      for (i in (Ends[j]+AddToStart[j]):Ends[j+1]){\n        if ((filter_parameter*bt[i-AddToStart[j]]+((1-filter_parameter)/2)*(btP[i]+btP[i-AddToStart[j]]))>btP[i]){\n          bt[i]<-btP[i]\n        } else bt[i]<-filter_parameter*bt[i-AddToStart[j]]+((1-filter_parameter)/2)*(btP[i]+btP[i-AddToStart[j]])\n        qft[i]<-streamflow[i]-bt[i]\n      }\n      if (j<passes){\n        btP<-bt\n        bt[Ends[j+1]]<-if(streamflow[Ends[j+1]]<mean(btP))streamflow[Ends[j+1]]/1.2 else mean(btP)\n        ##Refines the approximation of end values after the first pass\n      }\n    }\n    f <- data.frame(bt,qft)\n    return(f)\n  }\n",
    "created" : 1503505799107.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "429594882",
    "id" : "FD3B9E9F",
    "lastKnownWriteTime" : 1502985379,
    "last_content_update" : 1502985379,
    "path" : "/Volumes/smwesten/Source_Code/recharge/R/baseflow_Lyne_Hollick.R",
    "project_path" : "R/baseflow_Lyne_Hollick.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}